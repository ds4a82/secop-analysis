{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "######################################\n",
    "\n",
    "# ETL Proccess for SECOP TOPICS Project\n",
    "\n",
    "# Please see file requirements.txt \n",
    "# to install the requred libraries\n",
    "\n",
    "######################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sodapy import Socrata\n",
    "import itertools\n",
    "import psycopg2\n",
    "from psycopg2 import Error\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:root:Requests made without an app_token will be subject to strict throttling limits.\n"
     ]
    }
   ],
   "source": [
    "## Conexion to Datos Abiertos de Colombia\n",
    "\n",
    "client = Socrata(\"www.datos.gov.co\", None)\n",
    "secopI='xvdy-vvsk'\n",
    "secopII='jbjy-vk9h' \n",
    "count_SECOPII = client.get(secopII,select=\"COUNT(*)\")\n",
    "count_SECOPI = client.get(secopI,select=\"COUNT(*)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('PostgreSQL 12.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.3 20140911 (Red Hat 4.8.3-9), 64-bit',)]\n"
     ]
    }
   ],
   "source": [
    "## Conexion to AWS Postgres\n",
    "conn_string=\"dbname='' port='5432' user='postgres' password='mydb1234' host='ds4adatabase.cfuz9qvi996n.us-east-2.rds.amazonaws.com'\"\n",
    "conn = None\n",
    "conn=psycopg2.connect(conn_string)\n",
    "cursor=conn.cursor()\n",
    "cursor.execute('select version()')\n",
    "records = cursor.fetchall()\n",
    "conn.commit()\n",
    "cursor.close()\n",
    "conn.close\n",
    "print(records)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Table created successfully in PostgreSQL \n",
      "PostgreSQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "## Creating Table to integrated SECOPI & SECOP II\n",
    "from psycopg2 import Error\n",
    "try:\n",
    "    ##Connection\n",
    "    conn = psycopg2.connect(conn_string)\n",
    "    cursor = conn.cursor()\n",
    "    \n",
    "    ##Create table\n",
    "        \n",
    "    create_table_query = '''CREATE TABLE IF NOT EXISTS secop (\n",
    "        NOMBRE_ENTIDAD text,\n",
    "        NIT_ENTIDAD text,\n",
    "        DEPARTAMENTO text,\n",
    "        CIUDAD text,\n",
    "        ORDEN text,\n",
    "        ID_CONTRATO text,\n",
    "        ESTADO_CONTRATO text,\n",
    "        CODIGO_DE_CATEGORIA_PRINCIPAL text,\n",
    "        DESCRIPCION_DEL_PROCESO text,\n",
    "        TIPO_DE_CONTRATO text,\n",
    "        MODALIDAD_DE_CONTRATACION text,\n",
    "        FECHA_DE_FIRMA text,\n",
    "        FECHA_DE_INICIO_DE_EJECUCION text,\n",
    "        FECHA_DE_FIN_DE_EJECUCION text,\n",
    "        TIPODOCPROVEEDOR text,\n",
    "        DOCUMENTO_PROVEEDOR text,\n",
    "        PROVEEDOR_ADJUDICADO text,\n",
    "        VALOR_DEL_CONTRATO numeric,\n",
    "        ORIGEN_DE_LOS_RECURSOS text,\n",
    "        DIAS_ADICIONADOS bigint,\n",
    "        FUENTE text\n",
    "    );'''\n",
    "    cursor.execute(create_table_query)\n",
    "    conn.commit()\n",
    "    print(\"Table created successfully in PostgreSQL \")\n",
    "except (Exception, psycopg2.DatabaseError) as error :\n",
    "    print (\"Error while creating PostgreSQL table\", error)\n",
    "finally:\n",
    "    #closing database connection.\n",
    "        if(conn):\n",
    "            cursor.close()\n",
    "            conn.close()\n",
    "            print(\"PostgreSQL connection is closed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Inserting information of SECOP II\n",
    "\n",
    "%%time\n",
    "insert_table_query = '''INSERT INTO secop(\n",
    "    nombre_entidad, nit_entidad, departamento, ciudad, \n",
    "    orden, id_contrato, estado_contrato, codigo_de_categoria_principal, \n",
    "    descripcion_del_proceso, tipo_de_contrato, modalidad_de_contratacion, \n",
    "    fecha_de_firma, fecha_de_inicio_de_ejecucion, fecha_de_fin_de_ejecucion, \n",
    "    tipodocproveedor, documento_proveedor, proveedor_adjudicado, \n",
    "    valor_del_contrato, origen_de_los_recursos, dias_adicionados, fuente)\n",
    "    VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);'''\n",
    "start = 0            # Start at 0\n",
    "chunk_size = 10000    # Fetch 2000 rows at a time\n",
    "results =[]          # Empty out our result list\n",
    "while True:\n",
    "    \n",
    "     # Fetch the set of records starting at 'start'\n",
    "    results = client.get(secopII, offset=start, limit=chunk_size,select='''nombre_entidad, nit_entidad,\n",
    "                                        departamento,ciudad,orden,\n",
    "                                        id_contrato,estado_contrato,\n",
    "                                        codigo_de_categoria_principal,descripcion_del_proceso,\n",
    "                                        tipo_de_contrato,modalidad_de_contratacion,\n",
    "                                        fecha_de_firma, fecha_de_inicio_de_ejecucion,\n",
    "                                        fecha_de_fin_de_ejecucion,tipodocproveedor,\n",
    "                                        documento_proveedor,proveedor_adjudicado,\n",
    "                                        valor_del_contrato,origen_de_los_recursos,\n",
    "                                        dias_adicionados,\"SECOPII\"\n",
    "                                        ''')\n",
    "\n",
    "    results = pd.DataFrame(results)\n",
    "    results = results[['nombre_entidad', 'nit_entidad', 'departamento', 'ciudad', 'orden',\n",
    "       'id_contrato', 'estado_contrato', 'codigo_de_categoria_principal',\n",
    "       'descripcion_del_proceso', 'tipo_de_contrato', 'modalidad_de_contratacion',\n",
    "        'fecha_de_firma',  'fecha_de_inicio_de_ejecucion', 'fecha_de_fin_de_ejecucion',\n",
    "        'tipodocproveedor','documento_proveedor', 'proveedor_adjudicado', 'valor_del_contrato',\n",
    "        'origen_de_los_recursos', 'dias_adicionados','SECOPII']]\n",
    "    SecopI_list=results.values.tolist()\n",
    "    start = start + chunk_size\n",
    "    \n",
    "    ##Insert into database\n",
    "    try:\n",
    "        ##Connection\n",
    "        conn = psycopg2.connect(conn_string)\n",
    "        cursor = conn.cursor()\n",
    "        cursor.executemany(insert_table_query,SecopI_list)\n",
    "        conn.commit()\n",
    "        print(\"inserting records \",start)\n",
    "    except (Exception, psycopg2.DatabaseError) as error :\n",
    "        print (\"Error while inserting records in secop:\", error)\n",
    "    finally:\n",
    "        #closing database connection.\n",
    "            if(conn):\n",
    "                cursor.close()\n",
    "                conn.close()\n",
    "                #print(\"PostgreSQL connection is closed\") \n",
    "     # If we have fetched all of the records, bail out\n",
    "    if (start > int(count_SECOPII[0]['COUNT']) ):\n",
    "        break        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a difference in the number of records from SECOPII (Datos Abiertos) with the target Postgres DB.\n"
     ]
    }
   ],
   "source": [
    "## Control of records inserted:\n",
    "conn=psycopg2.connect(conn_string)\n",
    "cursor=conn.cursor()\n",
    "cursor.execute('select count(*)from secop;')\n",
    "records = cursor.fetchall()\n",
    "conn.commit()\n",
    "cursor.close()\n",
    "conn.close\n",
    "\n",
    "if records != int(count_SECOPII[0]['COUNT']):\n",
    "    print(\"There is a difference in the number of records from SECOPII (Datos Abiertos) with the target Postgres DB.\")\n",
    "else:\n",
    "    print(\"The number of records inserted in the DB is equal to the number of records read from SECOPII (Datos Abiertos).\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Inserting information of SECOP I\n",
    "%%time\n",
    "insert_table_query = '''INSERT INTO secop(\n",
    "    nombre_entidad, nit_entidad, departamento, ciudad, \n",
    "    orden, id_contrato, estado_contrato, codigo_de_categoria_principal, \n",
    "    descripcion_del_proceso, tipo_de_contrato, modalidad_de_contratacion, \n",
    "    fecha_de_firma, fecha_de_inicio_de_ejecucion, fecha_de_fin_de_ejecucion, \n",
    "    tipodocproveedor, documento_proveedor, proveedor_adjudicado, \n",
    "    valor_del_contrato, origen_de_los_recursos, dias_adicionados, fuente)\n",
    "    VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);'''\n",
    "start = 0            # Start at 0\n",
    "chunk_size = 20000    # Fetch 2000 rows at a time\n",
    "results =[]          # Empty out our result list\n",
    "while True:\n",
    "    \n",
    "     # Fetch the set of records starting at 'start'\n",
    "    results = client.get(secopI, offset=start, limit=chunk_size, select='''nombre_de_la_entidad, nit_de_la_entidad,\n",
    "                                        departamento_entidad,municipio_entidad,nivel_entidad,\n",
    "                                        numero_del_contrato,estado_del_proceso,\n",
    "                                        id_objeto_a_contratar,detalle_del_objeto_a_contratar,\n",
    "                                        tipo_de_contrato,regimen_de_contratacion,\n",
    "                                        fecha_de_firma_del_contrato, fecha_ini_ejec_contrato,\n",
    "                                        fecha_fin_ejec_contrato,tipo_identifi_del_contratista,\n",
    "                                        identificacion_del_contratista, nom_raz_social_contratista,\n",
    "                                        valor_contrato_con_adiciones,origen_de_los_recursos,\n",
    "                                        tiempo_adiciones_en_dias,\"SECOPI\"''')\n",
    "\n",
    "    results = pd.DataFrame(results)\n",
    "    \n",
    "    results = results[['nombre_de_la_entidad','nit_de_la_entidad', 'departamento_entidad', 'municipio_entidad',\n",
    "                          'nivel_entidad', 'numero_del_contrato', 'estado_del_proceso', 'id_objeto_a_contratar',\n",
    "                          'detalle_del_objeto_a_contratar', 'tipo_de_contrato', 'regimen_de_contratacion',\n",
    "                          'fecha_de_firma_del_contrato', 'fecha_ini_ejec_contrato', 'fecha_fin_ejec_contrato',\n",
    "                          'tipo_identifi_del_contratista', 'identificacion_del_contratista', 'nom_raz_social_contratista',\n",
    "                          'valor_contrato_con_adiciones', 'origen_de_los_recursos', 'tiempo_adiciones_en_dias',\n",
    "                          'SECOPI']]\n",
    "    \n",
    "    SecopI_list=results.values.tolist()\n",
    "    start = start + chunk_size\n",
    "    \n",
    "    ##Insert into database\n",
    "    try:\n",
    "        ##Connection\n",
    "        conn = psycopg2.connect(conn_string)\n",
    "        cursor = conn.cursor()\n",
    "        cursor.executemany(insert_table_query,SecopI_list)\n",
    "        conn.commit()\n",
    "        %time\n",
    "        print(\"inserting records \",start)\n",
    "    except (Exception, psycopg2.DatabaseError) as error :\n",
    "        print (\"Error while inserting records in secop:\", error)\n",
    "    finally:\n",
    "        #closing database connection.\n",
    "            if(conn):\n",
    "                cursor.close()\n",
    "                #conn.close()\n",
    "                #print(\"PostgreSQL connection is closed\")\n",
    "                \n",
    "    ####    \n",
    "     # If we have fetched all of the records, bail out\n",
    "    if (start > int(count_SECOPI[0]['COUNT']) ):\n",
    "        break   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/ec2-user'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
