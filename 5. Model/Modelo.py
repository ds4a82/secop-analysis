# -*- coding: utf-8 -*-
"""Modelo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b_uVKzY6liHcSqaON4m7oywprHSNyi_t
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip uninstall pandas
# %pip install pandas==1.1.1
# %pip install contexto
# %pip install sodapy
# %pip install -U matplotlib
# %pip install pyLDAvis

from contexto.limpieza import *
import warnings
warnings.filterwarnings("ignore")
from contexto.exploracion import *
import plotly.express as px
import plotly.offline as py #visualization
import plotly.graph_objs as go
from plotly.offline import *
import datetime

#K MEANS
from sklearn.cluster import MiniBatchKMeans, KMeans, DBSCAN, OPTICS
from sklearn.metrics import silhouette_score
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")
import bokeh.plotting as bp
from bokeh.palettes import d3
import bokeh.models as bmo
from bokeh.models import HoverTool, BoxSelectTool
from bokeh.embed import file_html
from bokeh.resources import CDN
from bokeh.plotting import figure, output_file, save

# LDA 
import gensim
import gensim.corpora as corpora
from gensim import matutils
from gensim.models import CoherenceModel
from gensim.models import wrappers
import pyLDAvis
import pyLDAvis.gensim

"""Read extract of 100k"""

df=pd.read_csv('/content/drive/My Drive/DS4A/secop.csv', encoding='latin1')
df

"""##Cleaning Lists
This Cleaning lists are created after running several times the model and fixing the results to be more meanfuly.
"""

Lista1=lista_stopwords()
Lista2=['para','.','como','servicios','prestacion','contrato','necesarias','vigentes','funcional','ficha','adscritas','basico','estructura','liga','caso','asociada','categoria','previo','monitor',
'elaboracion','promover','diagnostico','actual','cuanto','promuevan','documentales','realice','incentivos','ejercicio','adelantar','equipo','cuatro','dependencia',
'tengan','transcripcion','garantia','programadas','interna','entes','permita','sean','atender','nacion','pertenecientes','levantamiento','descritas','requieran','garantizar','dependencias',
 'decreto','aspectos','oportunidad','adscrito','adscritos','adscrita','tiempo','anos','mejores','tienen','sede','participacion','propios','realizar','realizarse','inscripcion',
'realizando','creacion','dirigido','dirigidos','desarrolla','desarrollan','agenda','encaminado','encaminados','esta','dependencia','enmarcado','llevar','cabo','noviembre',
'grad','realizacion','coordinacion','hacia','primer','informe','ofrecido','ofrecidos','nacional','compra','puesta','presentando','poder','disposicion','mediante','metodo','disponible',
'disponibilidad','necesidad','implementar','implementacion','formulacion','plan','descripcion','modalidad','anexo','cumplir','tambien','segundo','extension','apoyando','general','modalidades',
'adelantan','adelanta','externa','evento','conjunto','desarrollar','desarrollarse','periodo','periodos','reconocimiento','analisis','necesidades','inherentes','respuesta','donde','articular',
'identificar','estadisticas','estas','profesionales','apoyar','plan','accion','datos','realizar','acciones','apoyar','sistema','integrado','sonido','normas','convenio','cooperacion','poblacion',
'situacion','puesta','funcionamiento','familia','acompanamiento','psicosocial','familiar','demas','funciones','fortalecer','presente','contrato','propuesta','presentada','conformidad','juridico','juridicos',
'seguimiento','control','contratante','incluyendo','entregar','acuerdo','propuesta','custodia','amparar','respectivas','profesional','proyectos','acuerdo','tecnica','administrativa','plena','autonomia',
'profesionales','caracter','contratar','servicio','ejecucion','acciones','especiales','peligrosos','interes','publico','parametros','definidos','designada','bajo','direccion',
'asuntos','formalizacion','atencion','integral','personales','apoyo','institucionales','unidades','sociales','requiera','actividades','propias','permitan','ejecutar','actividades','armado','apoyar',
'proceso','segun','convenio','reconocimiento','sector','destino','adecuacion','material','horas','herramientas','procesos','subprocesos','natural','suministro','dotacion','banco','labor',
 'respectivo','acuerdo','requerimientos','gestion','prestar','desarrollo','marco','brindar','grupos','area','grupo','diferentes','requiere','prestados','entrega','prestar','obliga','brindar','programa',
 'programas','traves','diferentes','relacionadas','envio','parte','hacen','cada','objeto','entidad','coordinar','evaluacion','informacion','seis','estudio','tipo','institucional','proyecto','tecnico','tecnicos'
 'formacion','procedimientos','nivel']
Lista3=['calidad', 'tramites', 'instrumentos', 'misional', 'metas', 'laboral', 'ambiente', 'adelante', 'administrativos','financieros', 'cooperacion', 'putumayo', 'oficial', 'comision', 'asistencia', 'componente', 
        'temporal', 'planes', 'politica','publica', 'unidad','especial', 'tecnicas', 'orientar', 'legales', 'espacios', 'resultados', 'desarrollando', 'computo', 'industria', 'evaluaciones', 'economicas', 
        'intervenciones','colectivas', 'conocimiento', 'auxiliar', 'conservacion', 'espacio', 'plataforma', 'componentes', 'cuenta', 'estrategico', 'canales', 'conceptos', 'cargo', 'modelo', 'informes', 'ubicados', 
        'integracion', 'preparacion', 'proyeccion', 'casos', 'modulo', 'carrera', 'documental', 'oficina', 'operacion', 'ciudadana', 'participar', 'adecuado', 'administrativos','operativos', 'suscrito', 'lineamientos',
        'tecnicos', 'internos', 'taller', 'realicen', 'normal', 'secretaria', 'ciudadano', 'competencias', 'especialmente', 'generen', 'adelantados', 'tendientes', 'obligaciones', 'campana', 'punto', 'relacionados',
        'areas', 'tramite', 'solicitudes', 'correspondiente', 'complejidad', 'articulacion', 'proteccion', 'promocion', 'eventos', 'generacion', 'operativos', 'relacion', 'fisica', 'clasificacion', 'generar', 'cuidado',
        'delegada', 'compromete', 'actualizaciones', 'visitas', 'social', 'comunicacion', 'derechos', 'aprovechamient','economico', 'todas', 'incluido', 'inclusion', 'final', 'vigencia', 'administrativo', 'contractual',
        'titulada','complementaria', 'competencia', 'identificacion', 'contratista','compromete', 'incluye', 'partir', 'coadyuvar', 'commercio', 'afines', 'ciclo', 'objetivos', 'verificacion', 'mejoramiento',
        'social','asigndao', 'derivados', 'operativas', 'rentas', 'fisicos', 'estrategias', 'administrativos', 'medios', 'temas', 'tematica', 'especificamente', 'enlaces', 'ajustes', 'objetivo', 'adquisicion', 'juridica',
        'lineamientos', 'central', 'actividad', 'especializada', 'humano', 'presentacion', 'complejo', 'perteneciente', 'sala', 'buen', 'formacion', 'aunar','esfuerzos', 'campo', 'complementaria', 'grado', 'organizar', 
        'fortalecimiento', 'requeridos', 'acompanar', 'territorio', 'convivencia', 'producto', 'mercadeo', 'denominado', 'requeridas', 'vida', 'denominado','fortalecimiento', 'presupuestal', 'correctivo','costo', 'ubicado',
        'manera', 'oportunidades', 'fijo', 'identificado', 'asistencial', 'registro', 'elementos', 'asignada', 'acceso', 'oferta', 'condiciones', 'medidas', 'zona', 'superior', 'territorios', 'numero', 'siete',
        'identificacion','potenciales', 'especial', 'linea', 'procedimiento', 'seleccion', 'especialidad', 'gestor', 'resolucion', 'realiza', 'brigada', 'consultas', 'competitividad', 'encuentran', 'dentro', 
        'especializado', 'conforme', 'manera','autonoma', 'beneficiarios', 'generados', 'independiente', 'distribucion', 'afiliados', 'mayor', 'acuerdos', 'pedagogica', 'total', 'invitacion','publica', 'cumplimiento',
        'trabajo', 'manejo', 'operativa', 'contenidos', 'contador', 'emision', 'realizadas', 'atendiendo', 'mismo', 'integrante', 'estrategia', 'revision', 'estructuracion', 'relacionado', 'consolidacion', 'divulgacion',
        'ciudadania', 'actuaciones', 'presupuesto', 'desarrolladas', 'requerida', 'estrategicos', 'viirtud', 'niveles', 'sitio', 'disciplina', 'zonales', 'riesgo', 'politica', 'estableccimiento', 'misma', 'cuyo',
        'siguientes', 'cumplimiento','obligaciones', 'nuevas', 'requerimiento', 'usuarios', 'entidades', 'normatividad', 'riesgos', 'principal', 'respuestas', 'destinado', 'titulada', 'situaciones', 'promoviendo', 
        'asignadas', 'labores', 'estudios', 'necesarios', 'establecidos', 'legal', 'establecidas', 'tratamiento', 'igual', 'lider', 'dirigida', 'saludable', 'orientacion', 'actos','administrativos', 'aplicacion', 'base', 
        'establecido', 'marca', 'edicion', 'contribuir', 'orientadas', 'valoracion', 'regimen', 'alta', 'responsabilidad', 'diferencial', 'fomentar', 'forma', 'reporte','asesoria','subdirecion','contenidas'
        'medios','terminos','asegurar','archivo','documentos','contratacion','equipos','supervision','prestamo','venta','mesa',]
Lista4=['organizacion', 'despacho', 'cobertura', 'unico', 'recepcion', 'productivos', 'predio', 'operativo', 'secretarias', 'secop', 'universitario', 'escaneo', 'caja', 'insumos', 'monitoreo', 'contable', 'produccion',
 'coordinador', 'deporte', 'fisico', 'marcha', 'requieren', 'recreativas', 'alcance', 'norma', 'requisitos', 'deportes', 'licencias', 'centro', 'soporte', 'hace', 'municipales', 'capacidades', 'herramienta', 'baloncesto',
 'administracion', 'dise√±o', 'bienes', 'nuevo', 'depuracion', 'varios', 'desarrollados', 'etapas', 'logistico', 'comunidad', 'generales', 'humanos', 'decir','exista', 'subdireccion','indole', 'consulta', 'persona',
 'experiencia', 'proposito', 'naturaleza', 'enfermedad', 'musicales', 'traslado', 'pago', 'asesor', 'jornadas', 'practicas', 'practica', 'usuario', 'protocolos', 'colombiana', 'asistente', 'academicos', 'saludables', 
 'prestamo', 'empresa', 'financiera', 'medio', 'personas', 'ambientales', 'asesora', 'idoneidad','capacidad', 'pedagogicas', 'titulo', 'abogada', 'terminos', 'conv', 'tributaria', 'centro','comercio', 'economia', 'pais', 
 'acta', 'ingeniera', 'cumpliendo', 'infraestructura', 'inversion', 'asistenciales', 'logistica', 'impartir', 'tecnologica', 'recuperacion', 'elaborar', 'demanda', 'asociados', 'guias', 'adquirir', 'geografica',
 'disenos', 'edificio', 'sanitarias', 'digitales', 'complementarias', 'enfermero', 'facturacion', 'fondo', 'propiedad', 'fomento', 'bien','inmueble', 'liquidacion', 'dispositivos', 'banos', 'tramo', 'facturas', 'juego', 
 'digitacion', 'virtud', 'abogado', 'talento', 'cultural', 'juridicos', 'orden', 'contractuales', 'agencia', 'industrial', 'directrices', 'subproceso', 'economicos', 'alto', 'comunitarios', 'curso', 'organismos', 
 'contenidos', 'contratacion', 'archivo', 'administrativas', 'documentos', 'asignados', 'celebracion', 'ingresos', 'semana', 'logisticas', 'utilizacion', 'inmuebles','propiedad', 'asesoria', 'derecho', 'mediana','seguridad', 
 'licencia', 'fuente', 'mensual', 'ello', 'concurso', 'atendidos', 'aporte', 'ilegal', 'grasas', 'personal', 'funcionarios', 'suministrar', 'influencia', 'ampliacion', 'asignado', 'fuerza', 'internacionales', 'region',
 'logisticos', 'consistentes', 'contraidas','celebrado', 'basicas', 'tradicionales', 'asesorar', 'ruta', 'academica', 'pedagogico', 'etapa', 'indicadores', 'naturales', 'debe', 'privada', 'entorno', 'consumo', 'aulas',
 'escolares', 'grados', 'didactico', 'dias', 'planta', 'innovacion', 'contables', 'mantener', 'instituciones', 'ciencias', 'justicia', 'vulnerabilidad', 'emergencia', 'judicial', 'cartera', 'cobro', 'supervision', 
 'centros', 'virtual', 'programacion', 'turismo', 'investigaciones', 'enlace', 'mercado', 'cotizacion', 'subsidiado', 'condicion', 'precios', 'publicas','municipio', 'baja', 'individual', 'prevencion', 'bienestar', 
 'ciudad', 'internacional', 'enfermedades', 'libre', 'supervisor', 'dicho', 'presta', 'ejecutan', 'internas', 'aplicando', 'estrategica', 'fijos', 'regular','centro', 'productivas', 'actualizacion', 'empresas', 'colombia', 
 'gerencia', 'investigacion', 'entrada', 'enfoque', 'dirigidas', 'vulnerable', 'jornada', 'temporales', 'rutas', 'glosas', 'habilitacion', 'portal', 'factura', 'metalica', 'enfermeria', 'planeacion', 'cultura', 
 'recursos', 'tres', 'valor', 'registros', 'habilidades', 'fortaleciendo', 'preste', 'importancia', 'poblacional', 'verificar', 'barreras', 'arquitectura', 'incluyente', 'pesos', 'garanticen', 'fiscal', 'realizara',
 'pruebas', 'comunidades', 'capacidad', 'tecnologico', 'inventario', 'psicologa', 'reuniones', 'implementos', 'transmisibles', 'varias', 'institucion', 'operativo', 'educativo', 'distrito', 'educativa', 'necesario', 
 'comercial', 'interventoria', 'manual', 'nueva', 'escritorio', 'integrales', 'primero', 'fundacion', 'habitabilidad','calle', 'ampliacion','cobertura', 'gente', 'productos', 'academico', 'deportivo', 'tecnologo', 
 'garantizando', 'hospitalaria', 'renovacion', 'venta', 'imagen', 'productivo', 'presencial', 'mesa', 'dimension', 'establecimiento', 'adicion', 'tecnolog√≠a', 'profesion', 'promocionar', 'audiovisual', 
 'productor','unico', 'pufa','tramitado', 'recibe','acepta', 'respectiva','retribucion', 'instalaciones', 'cor√≥racion', 'celebrado', 'referencia', 'favor', 'operador', 'esperanza', 'encuentren', 'planeacion','municipal',
 'dando', 'normativo', 'educativas', 'montana', 'participaran', 'ubicacion', 'publicos', 'limpieza', 'cambio', 'respectivos', 'operatividad', 'cumpliendo','protocolos', 'brindand','humanizada', 'propia','suministrando',
 'abastecimiento', 'experiencia','asistenciales']

Lista5=['empresarial', 'estadistica', 'precontractual', 'adquisiciones', 'formatos', 'pieza', 'preventivas', 'recibo', 'actualizadao', 'contribuyentes', 'matriculados', 'bloque', 'diaria', 'logro', 'victima', 
         'encuentros', 'cuidados', 'necesaria', 'asistir', 'soportes', 'reserva', 'porvenir', 'recibidos', 'tener', 'representante', 'debera', 'facilitar', 'contenidas', 'lideres', 'designado', 'afectadas', 
         'complementacion', 'generan', 'vinculacion', 'expedientes', 'coactivo', 'concepto', 'manuales', 'tasa', 'matematicas', 'meses', 'diseno', 'disciplinarios', 'intendencia', 'clases', 'diversas', 'interpretacion',
         'metodologico', 'gestores', 'historico', 'desarrollara', 'agentes', 'comodante','real', 'campesina', 'ejercer', 'colaboradores', 'articulada', 'estilo', 'decretos','reglamentarios', 'establecida','pactados', 
         'compromis', 'abandonadas', 'materia', 'encaminadas','fenomeno', 'asegurando', 'indices', 'costos', 'variables', 'ejecutda','fenomeno', 'vigencias','futuras', 'reintegracion', 'cierre', 'activos', 'asignen', 
         'periodicos', 'tecnoacademia', 'pliego', 'nueve', 'facilitador', 'ingresan', 'nicsp', 'idartes','aprovechamiento', 'iniciativas', 'estudiantes', 'constitucional', 'continuo', 'fundamento','permiso', 
         'dinero','respectiva', 'retribucio','economia', 'acepta','pagar', 'descrito_encabezado', 'productor','recibe', 'contratos', 'encuentra', 'criterios', 'radicacion', 'solicitados', 'dispuestos', 'formativos', 
         'operativamente', 'modificaciones', 'dichas', 'contingencia', 'buena', 'descongestion', 'artistico', 'cuarto', 'curricular', 'visuales', 'universitaria', 'periodico', 'obligacion', 'huella', 
         'jurisdiccion','coactiva', 'fami', 'junto', 'tradicional', 'lineamiento','primera', 'armonia', 'hogares','hogares', 'experiencias_artisticas', 'administrador', 'epmsc', 'espacial', 'representantes', 'grupal', 
         'especifico', 'eleccion', 'mitigacion', 'agilizar','flujo', 'directa', 'solicitud', 'debidamente','habilitados', 'dimensiones', 'enfocadas', 'beneficios', 'conformar', 'animal', 'transferencia',
         'comportamiento', 'presupuestos', 'pertinentes', 'inicial', 'aportes', 'animo','lucro', 'subproyecto', 'tiempos', 'economista', 'previa', 'cintas', 'humanitaria', 'formato', 'goce', 'comprendido', 'nombre', 
         'lunes','viernes', 'financiero', 'funcionalidades', 'acopio', 'unidos', 'audiencias', 'cambios', 'ejecuta', 'domiciliario', 'gerencial', 'oficios', 'cantidad', 'defensoria','dadep', 'lograr', 'docencia', 
         'empresariales', 'multiple', 'denominados', 'horario', 'llevara', 'pista', 'facultad', 'previamente', 'cincuenta', 'verde', 'patrimonio', 'asignacion', 'convocatoria', 'subordinacion', 'desastre', 
         'honorarios', 'calamidad', 'colectiva', 'oportuno', 'dimensiones', 'treinta', 'ciudades', 'convensional', 'presentado', 'gobierno', 'documentacion', 'archivos', 'media','seguridad', 'producida', 'cuentas',
         'portafolio', 'corporativa', 'bobernacion', 'actualizar', 'acreditacion', 'soluciones', 'similares', 'respectiva', 'aplicar', 'dicha', 'sancionatorio', 'formativo', 'pgris', 'identificadas', 'incentivar',
         'aprovechamiento', 'evaluar', 'beneficio', 'empleados', 'excelencia', 'proveer', 'idoneidad', 'incrementar', 'juntas', 'politico', 'opera','unas']


Lista_Limpia=Lista1+Lista2+Lista3+Lista4+Lista5

"""Cleanning method to take out words that lenght is bigger than 4 characters, clean the accents in spanish and the words that don't explain correctly the contracts."""

df.descripcion_del_proceso=df.descripcion_del_proceso.apply(lambda x: limpieza_texto(x, n_min=4, quitar_acentos=True,quitar_numeros=False,lista_palabras=Lista_Limpia))

df.to_csv('SECOPI.csv')

"""# KMEANS
1. Vectorized the descriptions of the contracts using bag of words approach. TFIDF method.
2. Determine the optimal number of clusters using distortion and siloutthe score.
3. Run the K means with the optimal number of clusters.
4. Graph using TSNE to see the results of the model.
"""

from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
import nltk
nltk.download('stopwords')

def GetVZandTFIDF(data):
  global stopwords
  stopwords = [word.encode('utf-8') for word in stopwords.words('spanish')]
  vectorizer = TfidfVectorizer(
    min_df=5
    , analyzer='word'
    , ngram_range=(1, 2)
    , stop_words=stopwords)
  vz = vectorizer.fit_transform(list(data["descripcion_del_proceso"]))
  vz.shape
  tfidf = dict(zip(vectorizer.get_feature_names(), vectorizer.idf_))
  tfidf = pd.DataFrame(columns=['tfidf']).from_dict(dict(tfidf), orient='index')
  tfidf.columns = ['tfidf']
  return vz, tfidf, vectorizer
vz, tfidf, vectorizer = GetVZandTFIDF(df)

def GetClustersPerformance(vz, filename = "KMeansGroupTest.jpg", k_max = 50,algo='k'):
    vz.shape
    distorsions = []
    sil_scores = []
    for k in range(2, k_max): # k = 3
      print("Cluster : %s" %(k))
      if algo=='k':
        kmeans_model = MiniBatchKMeans(n_clusters=k, init='k-means++', n_init=1, random_state=42,  
                          init_size=1000, batch_size=50000,verbose=False, max_iter=1000)
      if algo=='db':
        aux=k/10
        kmeans_model=OPTICS()
      kmeans_model.fit(vz)
      sil_score = silhouette_score(vz, kmeans_model.labels_,sample_size=10000)
      print(f"sil_score:{sil_score}")
      sil_scores.append(sil_score)
      distorsions.append(kmeans_model.inertia_)
      print(f"distorsion:{kmeans_model.inertia_}")
      del(kmeans_model)
    f, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(25, 20))
    ax1.plot(range(2, k_max), distorsions)
    ax1.set_title('Distorsion vs num of clusters')
    ax1.grid(True)
    ax2.plot(range(2, k_max), sil_scores)
    ax2.set_title('Silhouette score vs num of clusters')
    ax2.grid(True)
    plt.savefig(filename)
    plt.close()
    return distorsions,sil_scores




def GetKmeans(vz, num_clusters,algo='k'):
      if algo=='k':
        kmeans_model = MiniBatchKMeans(n_clusters=num_clusters, init='k-means++', n_init=1, random_state=42,init_size=1000, batch_size=50000,verbose=False, max_iter=1000)
        kmeans = kmeans_model.fit(vz)
        kmeans_clusters = kmeans.predict(vz)
      if algo=='db':
        aux=num_clusters/10
        kmeans_model=DBSCAN(eps=aux, min_samples=100,n_jobs=-1)
        kmeans = kmeans_model.fit_predict(vz)
      return kmeans

def GetKeywordsKmeans(kmeans, vectorizer):
    sorted_centroids = kmeans.cluster_centers_.argsort()[:, ::-1]
    terms = vectorizer.get_feature_names()
    all_keywords = []
    for i in range(kmeans.n_clusters):
        topic_keywords = []
        for j in sorted_centroids[i, :10]:
            topic_keywords.append(terms[j])
        all_keywords.append(topic_keywords)
    
    keywords_df = pd.DataFrame(index=['topic_{0}'.format(i) for i in range(num_clusters)], 
                              columns=['keyword_{0}'.format(i) for i in range(10)],
                              data=all_keywords)
    return keywords_df
def GetKmeansDFTSNE(kmeans, data, vz, n_components = 2, n_iter = 500):
    kmeans_clusters = kmeans.predict(vz)
    kmeans_distances = kmeans.transform(vz)
    tsne_model = TSNE(n_components=n_components, verbose=1, random_state=0, n_iter=n_iter)
    tsne_kmeans = tsne_model.fit_transform(kmeans_distances)
    kmeans_df = pd.DataFrame(tsne_kmeans, columns=['x','y'])
    kmeans_df['cluster'] = kmeans_clusters
    kmeans_df['cluster'] = kmeans_df['cluster'].map(str)
    kmeans_df["descripcion_del_proceso"] = data["descripcion_del_proceso"]
    kmeans_df['id_contrato']=data['id_contrato']
    kmeans_df.to_csv('Kmeans.csv', index=False, encoding='utf-8')
    return kmeans_df

def GetKmeansDF(kmeans, data, vz,algo='k'):
  if algo=='k':
    kmeans_clusters = kmeans.predict(vz)
    kmeans_df = pd.DataFrame(kmeans_clusters, columns=['cluster'])
  if algo=='db':
    kmeans_clusters =kmeans
    kmeans_df = pd.DataFrame(kmeans_clusters, columns=['cluster'])
  kmeans_df['cluster'] = kmeans_df['cluster'].map(str)
  kmeans_df["descripcion_del_proceso"] = data["descripcion_del_proceso"]
  kmeans_df['id_contrato']=data['id_contrato']
  kmeans_df.to_csv('Kmeans.csv', index=False, encoding='utf-8')
  return kmeans_df

def exportKmeansDF(kmeans_df, filename = 'KMeansGraph.html', char_lenght = 200, title="KMeans clustering", plot_width=890, plot_height=600):
    plot_kmeans = bp.figure(
        plot_width=plot_width
        , plot_height=plot_height
        , title=title
        , tools= "pan,wheel_zoom,box_zoom,reset,hover"
        , x_axis_type=None, y_axis_type=None, min_border=1)
    palette = d3['Category20'][12] + d3['Category20b'][12]
    color_map = bmo.CategoricalColorMapper(
        factors=kmeans_df['cluster'].unique()
        , palette=palette
        )
    plot_kmeans.scatter('x', 'y', source=kmeans_df,
                        color={'field': 'cluster', 'transform': color_map},
                        legend='cluster')
    hover = plot_kmeans.select(dict(type=HoverTool))
    hover.tooltips={"description": "@descripcion_del_proceso", "cluster": "@cluster"}
    html = file_html(plot_kmeans, CDN, "Plot")
    output_file(filename, title=title, mode='inline', root_dir=None)
    save(plot_kmeans)

    
    # ---- K-Means ---- 

#dist,sil_scores=GetClustersPerformance(vz, filename = "KMeansGroupTest.jpg", k_max =50) # K=20
num_clusters = 20
kmeans = GetKmeans(vz, num_clusters)
keywords_df = GetKeywordsKmeans(kmeans, vectorizer)
#kmeansTSNE_df = GetKmeansDFTSNE(kmeans, df, vz,n_components = 2, n_iter = 1000)
kmeans_df = GetKmeansDF(kmeans, df, vz)
exportKmeansDF(kmeansTSNE_df, filename = 'KMeansGraph.html')

kmeans_df.cluster.value_counts()

"""#LDA TOPIC MODEL
1. Create the Corpus of the model using bag of words approach, it also includes the most relevant bigrams
2. Determine the optimal number of topics using the coherence as indicator.
3. Run the LDA using the optimal number of topics found in step 2.
4. Graph the LDA model using the function from gensim that allows to export an html with the model

5. Export the labels of the most common topics and the labels from K Means result.
"""

d_=df[:100000]
def sent_to_words(sentences):
    for sentence in sentences:
        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  # deacc=True removes punctuations
def setCorpusAux(data):
  data_words = list(sent_to_words(data["descripcion_del_proceso"]))
  data['tokens_bigram']=data_words
  bigram = gensim.models.Phrases(data['tokens_bigram'], min_count=5, threshold=2)
  bigram_mod = gensim.models.phrases.Phraser(bigram)
  data['tokens_bigram'] = data['tokens_bigram'].map(lambda tokens: bigram_mod[tokens])
  id2word = corpora.Dictionary(data['tokens_bigram'])
  texts = data['tokens_bigram'].values
  corpus = [id2word.doc2bow(text) for text in texts]
  return corpus, id2word,data
corpus,id2word,df = setCorpusAux(df)

def LDA_model(corpus, id2word, num_topics, passes=1, chunksize = 1000):
  # print("LDA Model. Number of topics: %s. Passes: %s" %(num_topics, passes))
  # Referencia: https://www.machinelearningplus.com/nlp/topic-modeling-gensim-python/
  return gensim.models.ldamodel.LdaModel(corpus=corpus
    , id2word=id2word
    , num_topics=num_topics
    , random_state=100
    , eval_every=10 # eval_every determines how often the model parameters should be updated
    , chunksize=chunksize # chunksize is the number of documents to be used in each training chunk
    , passes=passes # passes is the total number of training passes
    , per_word_topics=True
    , alpha='auto'
    )
  
def plot_coherences(x, y, filename):
  fig = plt.figure(figsize=(15, 5))
  plt.title('Choosing the optimal number of topics')
  plt.xlabel('Number of topics')
  plt.ylabel('Coherence')
  plt.grid(True)
  plt.plot(x, y)
  plt.savefig(filename)
  plt.close()


def exploreLDAmodels(data, corpus, id2word, topic_range=range(20, 40, 2), filename = "LDA_Topics.jpg"):
  coherences = []
  X=[]
  Y=[]
  for num_topics in topic_range: # num_topics = 5
    # lda_model = Mallet_model(corpus, id2word, num_topics)
    lda_model = LDA_model(corpus, id2word, num_topics, passes=5)
    perplexity = lda_model.log_perplexity(corpus) # The lower the better
    coherence_model = CoherenceModel(model=lda_model, texts=data['tokens_bigram'].values, dictionary=id2word, coherence='c_v') # The higher the better
    coherence = coherence_model.get_coherence() # The higher the better
    coherences.append(coherence)
    print("LDA Model %s. Number of topics: %s. Coherence: %s. Perplexity: %s" %(datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S"), num_topics, round(coherence, 4), round(perplexity, 2)))
    X.append(topic_range[0:len(coherences)])
    Y.append(coherences)
    plot_coherences(x = topic_range[0:len(coherences)], y = coherences, filename = filename)
  return coherences,lda_model,X,Y


coherences, models,X,Y = exploreLDAmodels(df,corpus,id2word, filename = "LDA_Topics.jpg")

def LDA_model(corpus, id2word, num_topics, passes=1, chunksize = 500):
  # print("LDA Model. Number of topics: %s. Passes: %s" %(num_topics, passes))
  # Referencia: https://www.machinelearningplus.com/nlp/topic-modeling-gensim-python/
  return gensim.models.ldamodel.LdaModel(corpus=corpus
    , id2word=id2word
    , num_topics=num_topics
    , random_state=100
    , eval_every=10 # eval_every determines how often the model parameters should be updated
    , chunksize=chunksize # chunksize is the number of documents to be used in each training chunk
    , passes=passes # passes is the total number of training passes
    , per_word_topics=True
    , alpha='auto'
    )
def display_topics(model):
    topics = model.show_topics(num_topics=model.num_topics, formatted=False, num_words=10)
    topics = map(lambda c: map(lambda cc: cc[0], c[1]), topics)
    df = pd.DataFrame(topics)
    df.index = ['topic_{0}'.format(i) for i in range(model.num_topics)]
    df.columns = ['keyword_{0}'.format(i) for i in range(1, 10+1)]
    return df
optimal_num_topics = 30 # This should be and input of previus explore_models function
best_model = LDA_model(corpus,id2word,num_topics=optimal_num_topics, passes=5)
Key_model=display_topics(model = best_model)
Key_model.to_csv('Key_Model.csv')

def get_document_topic_matrix(corpus, model,Top_topics=3):
  num_topics = model.num_topics
  matrix = []
  for row in corpus:
    output = np.zeros(num_topics)
    doc_proba = model[row][0]
    for doc, proba in doc_proba:
      output[doc] = proba
    matrix.append(output)
  matrix = np.array(matrix)
  Proba=pd.DataFrame(matrix)
  Top3=Proba.apply(lambda s, n: pd.Series(s.nlargest(n).index), axis=1, n=Top_topics)
  Top3.columns=[f'Topico_{i}'for i in range(len(Top3.columns))]
  return Top3

def exportLDA_vis(best_model, corpus, id2word, filename = 'pyLDAvis.html'):
  panel = pyLDAvis.gensim.prepare(best_model, corpus, id2word, mds='mmds')
  pyLDAvis.save_html(panel, filename)


matrix = get_document_topic_matrix(corpus,best_model)
exportLDA_vis(best_model,corpus,id2word)

matrix.to_csv('Grupos.csv')

"""## Exporting the results from the 2 models"""

LDA_Final=pd.concat([df,matrix],axis=1)
LDA_Final
kmeans_df
Final=pd.merge(LDA_Final,kmeans_df[['cluster','id_contrato']], on='id_contrato')
Final.to_csv('/content/drive/My Drive/DS4A/Clusters_Final.csv')